@page "/lessons/add"
@using TTleaser.ApiService.service
@using TTleaser.Web.Components.Models
@inject LessonService LessonService
@inject TeacherService TeacherService
@inject NavigationManager NavigationManager

<h3>Add Lesson</h3>

<div class="row">
    <!-- Form Column -->
    <div class="col-md-6">
        <EditForm Model="@lesson" OnValidSubmit="AddLesson">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Hidden Field for Form Name -->
            <InputHidden id="formName" @bind-Value="formName" />

            <div class="form-group">
                <label for="title">Title</label>
                <InputText id="title" class="form-control" @bind-Value="lesson.Title" />
            </div>
            <div class="form-group">
                <label for="date">Date</label>
                <InputDate id="date" class="form-control" @bind-Value="lesson.Date" />
            </div>
            <div class="form-group">
                <label for="teacher">Teacher</label>
                <select id="teacher" class="form-control" @bind="lesson.TeacherId">
                    <option value="">Select Teacher</option>
                    @if (teachers != null)
                    {
                        @foreach (var teacher in teachers)
                        {
                            <option value="@teacher.TeacherId">@teacher.Name</option>
                        }
                    }
                </select>
            </div>

            <button type="submit" class="btn btn-primary">Add</button>
        </EditForm>
    </div>

    <!-- Calendar and Time Column -->
    <div class="col-md-6 text-center">
        <div class="border p-3">
            <h4>Current Date and Time</h4>
            <p>@currentDateTime.ToString("dddd, MMMM dd, yyyy")</p>
            <p>@currentDateTime.ToString("hh:mm:ss tt")</p>
        </div>
    </div>
</div>

@code {
    private Models.Lesson lesson = new Models.Lesson();
    private List<Teacher> teachers = new List<Teacher>();
    private DateTime currentDateTime = DateTime.Now;
    private System.Timers.Timer timer;
    private string formName = "addLessonForm"; // Unique form identifier

    protected override async Task OnInitializedAsync()
    {
        try
        {
            teachers = await TeacherService.GetTeachersAsync() ?? new List<Teacher>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading teachers: {ex.Message}");
            teachers = new List<Teacher>(); // Fallback to an empty list
        }

        lesson.Date = DateTime.Now.Date; // Set current date as default
        InitializeTimer(); // Set up the timer for updating time
    }

    private async Task AddLesson()
    {
        if (formName == "addLessonForm") // Check form identifier
        {
            var selectedTeacher = teachers.FirstOrDefault(t => t.TeacherId == lesson.TeacherId);
            if (selectedTeacher != null)
            {
                lesson.Teacher = selectedTeacher;
                await LessonService.AddLessonAsync(lesson); // Add lesson
                NavigationManager.NavigateTo("/lessons");
            }
        }
    }

    private void InitializeTimer()
    {
        timer = new System.Timers.Timer(1000); // Tick every second
        timer.Elapsed += UpdateCurrentDateTime;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void UpdateCurrentDateTime(object source, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            currentDateTime = DateTime.Now;
            StateHasChanged(); // Update the UI
        });
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
